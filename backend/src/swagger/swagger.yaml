openapi: 3.0.0
info:
  title: Books API
  version: 1.0.0
  description: API for retrieving a list of books based on search criteria.
servers:
  - url: '/'
    description: Local development server

paths:
  /books:
    get:
      summary: Retrieve a list of books based on search criteria.
      parameters:
        - name: title
          in: query
          description: Partial or full title of the book.
          schema:
            type: string
        - name: author
          in: query
          description: Partial or full name of the author.
          schema:
            type: string
        - name: publishedDateStart
          in: query
          description: Start of the published date range.
          schema:
            type: string
            format: date
        - name: publishedDateEnd
          in: query
          description: End of the published date range.
          schema:
            type: string
            format: date
        - name: genre
          in: query
          description: Genre of the book.
          schema:
            type: string
        - name: sortBy
          in: query
          description: Sort the results by title, author, or publication date.
          schema:
            type: string
        - name: sortOrder
          in: query
          description: Sort order (asc or desc).
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination.
          schema:
            type: integer
        - name: size
          in: query
          description: Number of items per page for pagination.
          schema:
            type: integer
        - name: availability
          in: query
          description: Filter by availability (true or false).
          schema:
            type: boolean

      responses:
        '200':
          description: A list of books.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
      security:
        - jwt_auth: []

  /auth/login:
    post:
      summary: Authenticate user and obtain JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Successfully authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication.
        '401':
          description: Unauthorized. Invalid credentials.

  /auth/register:
    post:
      summary: Register a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '201':
          description: User registered successfully.
        '400':
          description: Bad request. User already exists or missing required fields.

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          type: string
        publishedDate:
          type: string
          format: date
        genre:
          type: string
        availability:
          type: boolean
  securitySchemes:
    jwt_auth:
      type: apiKey
      name: Authorization
      in: header
